CONFIG_DIR=$(dirname $(realpath -s $BASH_SOURCE))

# Import the variant config if we have one

if [ -n "$VARIANT_CONFIG" ] && [ -f $VARIANT_CONFIG ]
then
  echo "Sourcing variant config $VARIANT_CONFIG..."
  source $VARIANT_CONFIG
fi

# Import the flavor config if we have one

if [ -n "$FLAVOR_CONFIG" ] && [ -f $FLAVOR_CONFIG ]
then
  echo "Sourcing flavor config $FLAVOR_CONFIG..."
  source $FLAVOR_CONFIG
fi

# Import the local config if we have one

if [ -f $CONFIG_DIR/config.local ]
then
  echo "Sourcing config.local..."
  source $CONFIG_DIR/config.local
fi

###############################################################################
# All our config settings must start with OCTOPI_

[ -n "$OCTOPI_PRESCRIPT" ] || OCTOPI_PRESCRIPT=
[ -n "$OCTOPI_POSTSCRIPT" ] || OCTOPI_POSTSCRIPT=

[ -n "$OCTOPI_SCRIPT_PATH" ] || OCTOPI_SCRIPT_PATH=$CONFIG_DIR
[ -n "$OCTOPI_IMAGE_PATH" ] || OCTOPI_IMAGE_PATH=$OCTOPI_SCRIPT_PATH/image

[ -n "$OCTOPI_ZIP_IMG" ] || OCTOPI_ZIP_IMG=`ls -t $OCTOPI_IMAGE_PATH/*-raspbian*.zip | head -n 1`

[ -n "$OCTOPI_WORKSPACE" ] || OCTOPI_WORKSPACE=$OCTOPI_SCRIPT_PATH/workspace$WORKSPACE_POSTFIX
[ -n "$OCTOPI_CHROOT_SCRIPT_PATH" ] || OCTOPI_CHROOT_SCRIPT_PATH=$OCTOPI_SCRIPT_PATH/chroot_script
[ -n "$OCTOPI_MOUNT_PATH" ] || OCTOPI_MOUNT_PATH=$OCTOPI_WORKSPACE/mount

# if set will enlarge root parition prior to build by provided size in MB
[ -n "$OCTOPI_IMAGE_ENLARGEROOT" ] || OCTOPI_IMAGE_ENLARGEROOT=400

# if set will resize root partition on image after build to minimum size + 
# provided size in MB
[ -n "$OCTOPI_IMAGE_RESIZEROOT" ] || OCTOPI_IMAGE_RESIZEROOT=200

# a local directory on the build server to bind mount under /var/cache/apt
[ -n "$OCTOPI_APT_CACHE" ] || OCTOPI_APT_CACHE=$OCTOPI_WORKSPACE/aptcache

# a host:port combo for a apt-proxy (such as apt-cacher-ng) to use
[ -n "$OCTOPI_APT_PROXY" ] || OCTOPI_APT_PROXY=

# an alternative pypi index url to use, e.g. a proxy such as devpi
[ -n "$OCTOPI_PYPI_INDEX" ] || OCTOPI_PYPI_INDEX=

[ -n "$OCTOPI_OVERRIDE_HOSTNAME" ] || OCTOPI_OVERRIDE_HOSTNAME=octopi

# a git mirror to use for git clones instead of original remotes
[ -n "$OCTOPI_BUILD_REPO_MIRROR" ] || OCTOPI_BUILD_REPO_MIRROR=

# OctoPrint repo & branch
[ -n "$OCTOPI_OCTOPRINT_REPO_SHIP" ] || OCTOPI_OCTOPRINT_REPO_SHIP=https://github.com/foosel/OctoPrint.git
[ -n "$OCTOPI_OCTOPRINT_REPO_BUILD" ] || OCTOPI_OCTOPRINT_REPO_BUILD=
[ -n "$OCTOPI_OCTOPRINT_REPO_BRANCH" ] || OCTOPI_OCTOPRINT_REPO_BRANCH=master
[ -n "$OCTOPI_INCLUDE_OCTOPRINT" ] || OCTOPI_INCLUDE_OCTOPRINT=yes

# OctoPiPanel repo & branch
[ -n "$OCTOPI_OCTOPIPANEL_REPO_SHIP" ] || OCTOPI_OCTOPIPANEL_REPO_SHIP=https://github.com/jonaslorander/OctoPiPanel.git
[ -n "$OCTOPI_OCTOPIPANEL_REPO_BUILD" ] || OCTOPI_OCTOPIPANEL_REPO_BUILD=
[ -n "$OCTOPI_OCTOPIPANEL_REPO_BRANCH" ] || OCTOPI_OCTOPIPANEL_REPO_BRANCH=master
[ -n "$OCTOPI_OCTOPIPANEL_REPO_DEPTH" ] || OCTOPI_OCTOPIPANEL_REPO_DEPTH=1
[ -n "$OCTOPI_FBCP_REPO_SHIP" ] || OCTOPI_FBCP_REPO_SHIP=https://github.com/tasanakorn/rpi-fbcp
[ -n "$OCTOPI_FBCP_REPO_BUILD" ] || OCTOPI_FBCP_REPO_BUILD=$OCTOPI_FBCP_REPO_SHIP
[ -n "$OCTOPI_FBCP_REPO_BRANCH" ] || OCTOPI_FBCP_REPO_BRANCH=
[ -n "$OCTOPI_FBCP_REPO_DEPTH" ] || OCTOPI_FBCP_REPO_DEPTH=1
[ -n "$OCTOPI_INCLUDE_OCTOPIPANEL" ] || OCTOPI_INCLUDE_OCTOPIPANEL=yes

# CuraEngine archive & version
[ -n "$OCTOPI_CURAENGINE_VERSION" ] || OCTOPI_CURAENGINE_VERSION=15.04
[ -n "$OCTOPI_CURAENGINE_ARCHIVE" ] || OCTOPI_CURAENGINE_ARCHIVE=https://github.com/Ultimaker/CuraEngine/archive/$OCTOPI_CURAENGINE_VERSION.zip
[ -n "$OCTOPI_INCLUDE_CURAENGINE" ] || OCTOPI_INCLUDE_CURAENGINE=yes

# mjpg streamer
[ -n "$OCTOPI_MJPGSTREAMER_REPO_SHIP" ] || OCTOPI_MJPGSTREAMER_REPO_SHIP=https://github.com/jacksonliam/mjpg-streamer.git
[ -n "$OCTOPI_MJPGSTREAMER_REPO_BUILD" ] || OCTOPI_MJPGSTREAMER_REPO_BUILD=
[ -n "$OCTOPI_MJPGSTREAMER_REPO_BRANCH" ] || OCTOPI_MJPGSTREAMER_REPO_BRANCH=master
[ -n "$OCTOPI_MJPGSTREAMER_REPO_DEPTH" ] || OCTOPI_MJPGSTREAMER_REPO_DEPTH=1
[ -n "$OCTOPI_INCLUDE_MJPGSTREAMER" ] || OCTOPI_INCLUDE_MJPGSTREAMER=yes

# HAProxy
[ -n "$OCTOPI_INCLUDE_HAPROXY" ] || OCTOPI_INCLUDE_HAPROXY=yes

# WiringPi
[ -n "$OCTOPI_INCLUDE_WIRINGPI" ] || OCTOPI_INCLUDE_WIRINGPI=yes

# Photocentric specific variables
[ -n "$OCTOPI_PHOTOCENTRIC_HARDWARE" ] || OCTOPI_PHOTOCENTRIC_HARDWARE=standalone


###############################################################################
# Rewrite any build urls that are not yet set if we have a repository mirror
# configured.

if [ -n "$OCTOPI_BUILD_REPO_MIRROR" ]
then
	vars=`compgen -A variable | grep '^OCTOPI_' | grep 'REPO_BUILD'`
	for var in $vars
	do
		if [ ! -n "${!var}" ]
		then
			repo_ship_var=${var%_BUILD}_SHIP
			original=${!repo_ship_var}
			rewritten=$OCTOPI_BUILD_REPO_MIRROR`echo $original | awk -F '/' '{print $(NF)}'`

			echo "Rewriting build repo for $var from $original to $rewritten"
			eval $var=$rewritten
		fi
	done
fi

###############################################################################
# Print and export the final configuration.

echo "================================================================"
echo "Using the following config:"

vars=`compgen -A variable | grep '^OCTOPI_'`
for var in $vars
do
	echo "$var = ${!var}"
	eval export $var
done

echo "================================================================"
